/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as A3Import } from './routes/A3'
import { Route as A2Import } from './routes/A2'
import { Route as A1Import } from './routes/A1'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const A3Route = A3Import.update({
  id: '/A3',
  path: '/A3',
  getParentRoute: () => rootRoute,
} as any)

const A2Route = A2Import.update({
  id: '/A2',
  path: '/A2',
  getParentRoute: () => rootRoute,
} as any)

const A1Route = A1Import.update({
  id: '/A1',
  path: '/A1',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/A1': {
      id: '/A1'
      path: '/A1'
      fullPath: '/A1'
      preLoaderRoute: typeof A1Import
      parentRoute: typeof rootRoute
    }
    '/A2': {
      id: '/A2'
      path: '/A2'
      fullPath: '/A2'
      preLoaderRoute: typeof A2Import
      parentRoute: typeof rootRoute
    }
    '/A3': {
      id: '/A3'
      path: '/A3'
      fullPath: '/A3'
      preLoaderRoute: typeof A3Import
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/A1': typeof A1Route
  '/A2': typeof A2Route
  '/A3': typeof A3Route
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/A1': typeof A1Route
  '/A2': typeof A2Route
  '/A3': typeof A3Route
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/A1': typeof A1Route
  '/A2': typeof A2Route
  '/A3': typeof A3Route
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/A1' | '/A2' | '/A3'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/A1' | '/A2' | '/A3'
  id: '__root__' | '/' | '/A1' | '/A2' | '/A3'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  A1Route: typeof A1Route
  A2Route: typeof A2Route
  A3Route: typeof A3Route
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  A1Route: A1Route,
  A2Route: A2Route,
  A3Route: A3Route,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/A1",
        "/A2",
        "/A3"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/A1": {
      "filePath": "A1.tsx"
    },
    "/A2": {
      "filePath": "A2.tsx"
    },
    "/A3": {
      "filePath": "A3.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
