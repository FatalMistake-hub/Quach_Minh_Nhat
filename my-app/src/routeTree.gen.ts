/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/app'
import { Route as IndexImport } from './routes/index'
import { Route as AppA3Import } from './routes/app.A3'
import { Route as AppA2Import } from './routes/app.A2'
import { Route as AppA1IIIImport } from './routes/app.A1/III'
import { Route as AppA1IIImport } from './routes/app.A1/II'
import { Route as AppA1IImport } from './routes/app.A1/I'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppA3Route = AppA3Import.update({
  id: '/A3',
  path: '/A3',
  getParentRoute: () => AppRoute,
} as any)

const AppA2Route = AppA2Import.update({
  id: '/A2',
  path: '/A2',
  getParentRoute: () => AppRoute,
} as any)

const AppA1IIIRoute = AppA1IIIImport.update({
  id: '/A1/III',
  path: '/A1/III',
  getParentRoute: () => AppRoute,
} as any)

const AppA1IIRoute = AppA1IIImport.update({
  id: '/A1/II',
  path: '/A1/II',
  getParentRoute: () => AppRoute,
} as any)

const AppA1IRoute = AppA1IImport.update({
  id: '/A1/I',
  path: '/A1/I',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/A2': {
      id: '/app/A2'
      path: '/A2'
      fullPath: '/app/A2'
      preLoaderRoute: typeof AppA2Import
      parentRoute: typeof AppImport
    }
    '/app/A3': {
      id: '/app/A3'
      path: '/A3'
      fullPath: '/app/A3'
      preLoaderRoute: typeof AppA3Import
      parentRoute: typeof AppImport
    }
    '/app/A1/I': {
      id: '/app/A1/I'
      path: '/A1/I'
      fullPath: '/app/A1/I'
      preLoaderRoute: typeof AppA1IImport
      parentRoute: typeof AppImport
    }
    '/app/A1/II': {
      id: '/app/A1/II'
      path: '/A1/II'
      fullPath: '/app/A1/II'
      preLoaderRoute: typeof AppA1IIImport
      parentRoute: typeof AppImport
    }
    '/app/A1/III': {
      id: '/app/A1/III'
      path: '/A1/III'
      fullPath: '/app/A1/III'
      preLoaderRoute: typeof AppA1IIIImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppA2Route: typeof AppA2Route
  AppA3Route: typeof AppA3Route
  AppA1IRoute: typeof AppA1IRoute
  AppA1IIRoute: typeof AppA1IIRoute
  AppA1IIIRoute: typeof AppA1IIIRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppA2Route: AppA2Route,
  AppA3Route: AppA3Route,
  AppA1IRoute: AppA1IRoute,
  AppA1IIRoute: AppA1IIRoute,
  AppA1IIIRoute: AppA1IIIRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/A2': typeof AppA2Route
  '/app/A3': typeof AppA3Route
  '/app/A1/I': typeof AppA1IRoute
  '/app/A1/II': typeof AppA1IIRoute
  '/app/A1/III': typeof AppA1IIIRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/A2': typeof AppA2Route
  '/app/A3': typeof AppA3Route
  '/app/A1/I': typeof AppA1IRoute
  '/app/A1/II': typeof AppA1IIRoute
  '/app/A1/III': typeof AppA1IIIRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/A2': typeof AppA2Route
  '/app/A3': typeof AppA3Route
  '/app/A1/I': typeof AppA1IRoute
  '/app/A1/II': typeof AppA1IIRoute
  '/app/A1/III': typeof AppA1IIIRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/A2'
    | '/app/A3'
    | '/app/A1/I'
    | '/app/A1/II'
    | '/app/A1/III'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/app/A2'
    | '/app/A3'
    | '/app/A1/I'
    | '/app/A1/II'
    | '/app/A1/III'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/A2'
    | '/app/A3'
    | '/app/A1/I'
    | '/app/A1/II'
    | '/app/A1/III'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/A2",
        "/app/A3",
        "/app/A1/I",
        "/app/A1/II",
        "/app/A1/III"
      ]
    },
    "/app/A2": {
      "filePath": "app.A2.tsx",
      "parent": "/app"
    },
    "/app/A3": {
      "filePath": "app.A3.tsx",
      "parent": "/app"
    },
    "/app/A1/I": {
      "filePath": "app.A1/I.tsx",
      "parent": "/app"
    },
    "/app/A1/II": {
      "filePath": "app.A1/II.tsx",
      "parent": "/app"
    },
    "/app/A1/III": {
      "filePath": "app.A1/III.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
