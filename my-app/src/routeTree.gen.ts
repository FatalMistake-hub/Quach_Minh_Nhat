/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as A3Import } from './routes/A3'
import { Route as A2Import } from './routes/A2'
import { Route as IndexImport } from './routes/index'
import { Route as A1IIIImport } from './routes/A1/III'
import { Route as A1IIImport } from './routes/A1/II'
import { Route as A1IImport } from './routes/A1/I'

// Create/Update Routes

const A3Route = A3Import.update({
  id: '/A3',
  path: '/A3',
  getParentRoute: () => rootRoute,
} as any)

const A2Route = A2Import.update({
  id: '/A2',
  path: '/A2',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const A1IIIRoute = A1IIIImport.update({
  id: '/A1/III',
  path: '/A1/III',
  getParentRoute: () => rootRoute,
} as any)

const A1IIRoute = A1IIImport.update({
  id: '/A1/II',
  path: '/A1/II',
  getParentRoute: () => rootRoute,
} as any)

const A1IRoute = A1IImport.update({
  id: '/A1/I',
  path: '/A1/I',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/A2': {
      id: '/A2'
      path: '/A2'
      fullPath: '/A2'
      preLoaderRoute: typeof A2Import
      parentRoute: typeof rootRoute
    }
    '/A3': {
      id: '/A3'
      path: '/A3'
      fullPath: '/A3'
      preLoaderRoute: typeof A3Import
      parentRoute: typeof rootRoute
    }
    '/A1/I': {
      id: '/A1/I'
      path: '/A1/I'
      fullPath: '/A1/I'
      preLoaderRoute: typeof A1IImport
      parentRoute: typeof rootRoute
    }
    '/A1/II': {
      id: '/A1/II'
      path: '/A1/II'
      fullPath: '/A1/II'
      preLoaderRoute: typeof A1IIImport
      parentRoute: typeof rootRoute
    }
    '/A1/III': {
      id: '/A1/III'
      path: '/A1/III'
      fullPath: '/A1/III'
      preLoaderRoute: typeof A1IIIImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/A2': typeof A2Route
  '/A3': typeof A3Route
  '/A1/I': typeof A1IRoute
  '/A1/II': typeof A1IIRoute
  '/A1/III': typeof A1IIIRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/A2': typeof A2Route
  '/A3': typeof A3Route
  '/A1/I': typeof A1IRoute
  '/A1/II': typeof A1IIRoute
  '/A1/III': typeof A1IIIRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/A2': typeof A2Route
  '/A3': typeof A3Route
  '/A1/I': typeof A1IRoute
  '/A1/II': typeof A1IIRoute
  '/A1/III': typeof A1IIIRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/A2' | '/A3' | '/A1/I' | '/A1/II' | '/A1/III'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/A2' | '/A3' | '/A1/I' | '/A1/II' | '/A1/III'
  id: '__root__' | '/' | '/A2' | '/A3' | '/A1/I' | '/A1/II' | '/A1/III'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  A2Route: typeof A2Route
  A3Route: typeof A3Route
  A1IRoute: typeof A1IRoute
  A1IIRoute: typeof A1IIRoute
  A1IIIRoute: typeof A1IIIRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  A2Route: A2Route,
  A3Route: A3Route,
  A1IRoute: A1IRoute,
  A1IIRoute: A1IIRoute,
  A1IIIRoute: A1IIIRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/A2",
        "/A3",
        "/A1/I",
        "/A1/II",
        "/A1/III"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/A2": {
      "filePath": "A2.tsx"
    },
    "/A3": {
      "filePath": "A3.tsx"
    },
    "/A1/I": {
      "filePath": "A1/I.tsx"
    },
    "/A1/II": {
      "filePath": "A1/II.tsx"
    },
    "/A1/III": {
      "filePath": "A1/III.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
